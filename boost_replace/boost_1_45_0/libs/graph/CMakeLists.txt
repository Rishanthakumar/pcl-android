
cmake_minimum_required(VERSION 3.5)
project(boost_graph)
include(CMakePackageConfigHelpers)

find_package(boost_disjoint_sets)
find_package(boost_iterator)
find_package(boost_property_tree)
find_package(boost_move)
find_package(boost_functional)
find_package(boost_tti)
find_package(boost_concept_check)
find_package(boost_integer)
find_package(boost_array)
find_package(boost_unordered)
find_package(boost_utility)
find_package(boost_regex)
find_package(boost_static_assert)
find_package(boost_property_map)
find_package(boost_detail)
find_package(boost_any)
find_package(boost_type_traits)
find_package(boost_foreach)
find_package(boost_test)
find_package(boost_parameter)
find_package(boost_math)
find_package(boost_smart_ptr)
find_package(boost_function)
find_package(boost_core)
find_package(boost_random)
find_package(boost_tuple)
find_package(boost_mpl)
find_package(boost_conversion)
find_package(boost_assert)
find_package(boost_graph_parallel)
find_package(boost_preprocessor)
find_package(boost_bimap)
find_package(boost_serialization)
find_package(boost_optional)
find_package(boost_spirit)
find_package(boost_xpressive)
find_package(boost_algorithm)
find_package(boost_config)
find_package(boost_multi_index)
find_package(boost_range)
find_package(boost_typeof)
find_package(boost_bind)
find_package(boost_lexical_cast)
find_package(boost_throw_exception)

add_library(boost_graph 
src/graphml.cpp
src/read_graphviz_new.cpp
)
add_library(boost::graph ALIAS boost_graph)
set_property(TARGET boost_graph PROPERTY EXPORT_NAME graph)

target_include_directories(boost_graph PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

if(boost_disjoint_sets_FOUND)
target_link_libraries(boost_graph PUBLIC boost::disjoint_sets)
endif()
if(boost_iterator_FOUND)
target_link_libraries(boost_graph PUBLIC boost::iterator)
endif()
if(boost_property_tree_FOUND)
target_link_libraries(boost_graph PUBLIC boost::property_tree)
endif()
if(boost_move_FOUND)
target_link_libraries(boost_graph PUBLIC boost::move)
endif()
if(boost_functional_FOUND)
target_link_libraries(boost_graph PUBLIC boost::functional)
endif()
if(boost_tti_FOUND)
target_link_libraries(boost_graph PUBLIC boost::tti)
endif()
if(boost_concept_check_FOUND)
target_link_libraries(boost_graph PUBLIC boost::concept_check)
endif()
if(boost_integer_FOUND)
target_link_libraries(boost_graph PUBLIC boost::integer)
endif()
if(boost_array_FOUND)
target_link_libraries(boost_graph PUBLIC boost::array)
endif()
if(boost_unordered_FOUND)
target_link_libraries(boost_graph PUBLIC boost::unordered)
endif()
if(boost_utility_FOUND)
target_link_libraries(boost_graph PUBLIC boost::utility)
endif()
if(boost_regex_FOUND)
target_link_libraries(boost_graph PUBLIC boost::regex)
endif()
if(boost_static_assert_FOUND)
target_link_libraries(boost_graph PUBLIC boost::static_assert)
endif()
if(boost_property_map_FOUND)
target_link_libraries(boost_graph PUBLIC boost::property_map)
endif()
if(boost_detail_FOUND)
target_link_libraries(boost_graph PUBLIC boost::detail)
endif()
if(boost_any_FOUND)
target_link_libraries(boost_graph PUBLIC boost::any)
endif()
if(boost_type_traits_FOUND)
target_link_libraries(boost_graph PUBLIC boost::type_traits)
endif()
if(boost_foreach_FOUND)
target_link_libraries(boost_graph PUBLIC boost::foreach)
endif()
if(boost_test_FOUND)
target_link_libraries(boost_graph PUBLIC boost::test)
endif()
if(boost_parameter_FOUND)
target_link_libraries(boost_graph PUBLIC boost::parameter)
endif()
if(boost_math_FOUND)
target_link_libraries(boost_graph PUBLIC boost::math)
endif()
if(boost_smart_ptr_FOUND)
target_link_libraries(boost_graph PUBLIC boost::smart_ptr)
endif()
if(boost_function_FOUND)
target_link_libraries(boost_graph PUBLIC boost::function)
endif()
if(boost_core_FOUND)
target_link_libraries(boost_graph PUBLIC boost::core)
endif()
if(boost_random_FOUND)
target_link_libraries(boost_graph PUBLIC boost::random)
endif()
if(boost_tuple_FOUND)
target_link_libraries(boost_graph PUBLIC boost::tuple)
endif()
if(boost_mpl_FOUND)
target_link_libraries(boost_graph PUBLIC boost::mpl)
endif()
if(boost_conversion_FOUND)
target_link_libraries(boost_graph PUBLIC boost::conversion)
endif()
if(boost_assert_FOUND)
target_link_libraries(boost_graph PUBLIC boost::assert)
endif()
if(boost_graph_parallel_FOUND)
target_link_libraries(boost_graph PUBLIC boost::graph_parallel)
endif()
if(boost_preprocessor_FOUND)
target_link_libraries(boost_graph PUBLIC boost::preprocessor)
endif()
if(boost_bimap_FOUND)
target_link_libraries(boost_graph PUBLIC boost::bimap)
endif()
if(boost_serialization_FOUND)
target_link_libraries(boost_graph PUBLIC boost::serialization)
endif()
if(boost_optional_FOUND)
target_link_libraries(boost_graph PUBLIC boost::optional)
endif()
if(boost_spirit_FOUND)
target_link_libraries(boost_graph PUBLIC boost::spirit)
endif()
if(boost_xpressive_FOUND)
target_link_libraries(boost_graph PUBLIC boost::xpressive)
endif()
if(boost_algorithm_FOUND)
target_link_libraries(boost_graph PUBLIC boost::algorithm)
endif()
if(boost_config_FOUND)
target_link_libraries(boost_graph PUBLIC boost::config)
endif()
if(boost_multi_index_FOUND)
target_link_libraries(boost_graph PUBLIC boost::multi_index)
endif()
if(boost_range_FOUND)
target_link_libraries(boost_graph PUBLIC boost::range)
endif()
if(boost_typeof_FOUND)
target_link_libraries(boost_graph PUBLIC boost::typeof)
endif()
if(boost_bind_FOUND)
target_link_libraries(boost_graph PUBLIC boost::bind)
endif()
if(boost_lexical_cast_FOUND)
target_link_libraries(boost_graph PUBLIC boost::lexical_cast)
endif()
if(boost_throw_exception_FOUND)
target_link_libraries(boost_graph PUBLIC boost::throw_exception)
endif()



install(DIRECTORY include/ DESTINATION include)

install(TARGETS boost_graph EXPORT boost_graph-targets
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    INCLUDES DESTINATION include
)

install(EXPORT boost_graph-targets
  FILE boost_graph-targets.cmake
  NAMESPACE boost::
  DESTINATION lib/cmake/boost_graph
)

file(WRITE "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "include(CMakeFindDependencyMacro)")
if(boost_disjoint_sets_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_disjoint_sets)
")
endif()
if(boost_iterator_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_iterator)
")
endif()
if(boost_property_tree_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_property_tree)
")
endif()
if(boost_move_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_move)
")
endif()
if(boost_functional_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_functional)
")
endif()
if(boost_tti_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_tti)
")
endif()
if(boost_concept_check_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_concept_check)
")
endif()
if(boost_integer_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_integer)
")
endif()
if(boost_array_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_array)
")
endif()
if(boost_unordered_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_unordered)
")
endif()
if(boost_utility_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_utility)
")
endif()
if(boost_regex_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_regex)
")
endif()
if(boost_static_assert_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_static_assert)
")
endif()
if(boost_property_map_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_property_map)
")
endif()
if(boost_detail_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_detail)
")
endif()
if(boost_any_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_any)
")
endif()
if(boost_type_traits_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_type_traits)
")
endif()
if(boost_foreach_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_foreach)
")
endif()
if(boost_test_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_test)
")
endif()
if(boost_parameter_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_parameter)
")
endif()
if(boost_math_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_math)
")
endif()
if(boost_smart_ptr_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_smart_ptr)
")
endif()
if(boost_function_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_function)
")
endif()
if(boost_core_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_core)
")
endif()
if(boost_random_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_random)
")
endif()
if(boost_tuple_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_tuple)
")
endif()
if(boost_mpl_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_mpl)
")
endif()
if(boost_conversion_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_conversion)
")
endif()
if(boost_assert_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_assert)
")
endif()
if(boost_graph_parallel_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_graph_parallel)
")
endif()
if(boost_preprocessor_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_preprocessor)
")
endif()
if(boost_bimap_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_bimap)
")
endif()
if(boost_serialization_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_serialization)
")
endif()
if(boost_optional_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_optional)
")
endif()
if(boost_spirit_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_spirit)
")
endif()
if(boost_xpressive_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_xpressive)
")
endif()
if(boost_algorithm_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_algorithm)
")
endif()
if(boost_config_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_config)
")
endif()
if(boost_multi_index_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_multi_index)
")
endif()
if(boost_range_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_range)
")
endif()
if(boost_typeof_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_typeof)
")
endif()
if(boost_bind_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_bind)
")
endif()
if(boost_lexical_cast_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_lexical_cast)
")
endif()
if(boost_throw_exception_FOUND)
file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
find_package(boost_throw_exception)
")
endif()


file(APPEND "${PROJECT_BINARY_DIR}/boost_graph-config.cmake" "
include(\"\${CMAKE_CURRENT_LIST_DIR}/boost_graph-targets.cmake\")
")

write_basic_package_version_file("${PROJECT_BINARY_DIR}/boost_graph-config-version.cmake"
  VERSION 1.64
  COMPATIBILITY AnyNewerVersion
  )

install(FILES
    "${PROJECT_BINARY_DIR}/boost_graph-config.cmake"
    "${PROJECT_BINARY_DIR}/boost_graph-config-version.cmake"
  DESTINATION lib/cmake/boost_graph
)

